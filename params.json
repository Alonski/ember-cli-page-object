{"name":"Ember-cli-page-object","tagline":"Represent the screens of your web app as a series of objects. This ember-cli addon ease the construction of these objects on your acceptance tests.","body":"# Ember Page Objects [![Build Status](https://travis-ci.org/san650/ember-cli-page-object.svg?branch=master)](https://travis-ci.org/san650/ember-cli-page-object)\r\n\r\nRepresent the screens of your web app as a series of objects. This ember-cli\r\naddon ease the construction of these objects on your acceptance tests.\r\n\r\n## What is a Page Object?\r\n\r\nAn excerpt from the Selenium Wiki\r\n> Within your web app's UI there are areas that your tests interact with. A Page\r\n> Object simply models these as objects within the test code. This reduces the\r\n> amount of duplicated code and means that if the UI changes, the fix need only\r\n> be applied in one place.\r\n\r\nThe pattern was first introduced by the Selenium\r\n\r\nYou can find more information about this design pattern here:\r\n* [Page Objects - Selenium wiki](https://code.google.com/p/selenium/wiki/PageObjects)\r\n* [PageObject - Martin Fowler](http://martinfowler.com/bliki/PageObject.html)\r\n\r\n## Usage\r\n\r\nInstall the npm package on your ember-cli project\r\n\r\n```sh\r\nnpm install --save-dev ember-cli-page-object\r\n```\r\n\r\nthen import the page-object helper\r\n\r\n```js\r\nimport PO from '../page-object';\r\n```\r\n\r\nThe previous example assumes that your test file is one level deep under\r\n`tests/` folder. i.e. `tests/acceptance/my-acceptance-test.js`.\r\n\r\nThen you can start building your page objects as follows:\r\n\r\n```js\r\nvar login = PO.build({\r\n  visit:        PO.visitable('/login'),\r\n  userName:     PO.fillable('#username'),\r\n  password:     PO.fillable('#password'),\r\n  submit:       PO.clickable('#login'),\r\n  errorMessage: PO.text('.message')\r\n});\r\n\r\ntest('Invalid log in', function(assert) {\r\n  login\r\n    .visit()\r\n    .userName('user@example.com')\r\n    .password('secret')\r\n    .submit();\r\n\r\n  andThen(function() {\r\n    assert.equal(login.errorMessage(), 'Invalid credentials!');\r\n  });\r\n});\r\n```\r\n\r\nBuilt-in support for defining tables and collections:\r\n\r\n```html\r\n<table id=\"users\">\r\n  <tr>\r\n    <td>Jane</td>\r\n    <td>Doe</td>\r\n  </tr>\r\n  <tr>\r\n    <td>John</td>\r\n    <td>Doe</td>\r\n  </tr>\r\n</table>\r\n```\r\n\r\n```js\r\nvar page = PO.build({\r\n  visit: PO.visitable('/users'),\r\n\r\n  users: PO.collection({\r\n    itemScope: '#users tr',\r\n\r\n    item: {\r\n      firstName: PO.text('td:nth-of-type(1)'),\r\n      lastName:  PO.text('td:nth-of-type(2)')\r\n    }\r\n  })\r\n});\r\n\r\ntest('show all users', function(assert) {\r\n  page.visit();\r\n\r\n  andThen(function() {\r\n    assert.equal(page.users().count(), 2);\r\n    assert.equal(page.users(1).firstName(), 'Jane');\r\n    assert.equal(page.users(1).lastName(), 'Doe');\r\n    assert.equal(page.users(2).firstName(), 'John');\r\n    assert.equal(page.users(2).lastName(), 'Doe');\r\n  });\r\n});\r\n```\r\n\r\nYou can use ES6 destructuring to declutter even more your page definition:\r\n\r\n```js\r\nvar { visitable, collection, text } = PO;\r\n\r\nvar page = PO.build({\r\n  visit: visitable('/users'),\r\n\r\n  users: collection({\r\n    itemScope: '#users tr',\r\n\r\n    item: {\r\n      firstName: text('td:nth-of-type(1)'),\r\n      lastName:  text('td:nth-of-type(2)')\r\n    }\r\n  })\r\n});\r\n```\r\n\r\n## Documentation\r\n\r\nCheck the full [DOCUMENTATION](./DOCUMENTATION.md) for more information.\r\n\r\n## Blueprints\r\n\r\nThe addon includes the following blueprints\r\n\r\n| Name | Description |\r\n| -------- | --------------- |\r\n| `page-object` | Creates a new page object under `tests/pages` folder |\r\n| `page-object-component` | Creates a new a component object to be used on a page object under `tests/pages/components` folder. |\r\n| `page-object-helper` |  Creates a new a helper object to be used on a page object under `tests/pages/helpers` folder. |\r\n\r\nYou can create a new page object called `users` using the `generate` command\r\n\r\n```sh\r\n$ ember generate page-object users\r\n\r\ninstalling\r\n  create tests/pages/users.js\r\n```\r\n\r\nA new file will be generated under `tests/pages` folder and can be included on\r\nan acceptance test like follows\r\n\r\n```js\r\nimport Ember from 'ember';\r\nimport { module, test } from 'qunit';\r\nimport startApp from '../helpers/start-app';\r\nimport page from '../pages/users';\r\n\r\nvar application;\r\n\r\nmodule('Acceptance: UserList', {\r\n  beforeEach: function() {\r\n    application = startApp();\r\n  },\r\n\r\n  afterEach: function() {\r\n    Ember.run(application, 'destroy');\r\n  }\r\n});\r\n\r\ntest('visiting /users', function(assert) {\r\n  page.visit();\r\n\r\n  andThen(function() {\r\n    assert.equal(currentPath(), 'users');\r\n  });\r\n});\r\n```\r\n\r\n## Development\r\n\r\n### Installation\r\n\r\n* `git clone` this repository\r\n* `npm install`\r\n* `bower install`\r\n\r\n### Running\r\n\r\n* `ember server`\r\n* Visit your app at http://localhost:4200.\r\n\r\n### Running Tests\r\n\r\n* `ember test`\r\n* `ember test --server`\r\n\r\n### Building\r\n\r\n* `ember build`\r\n\r\n### Project's health\r\n\r\n[![Build Status](https://travis-ci.org/san650/ember-cli-page-object.svg?branch=master)](https://travis-ci.org/san650/ember-cli-page-object)\r\n[![Ember Observer Score](http://emberobserver.com/badges/ember-cli-page-object.svg)](http://emberobserver.com/addons/ember-cli-page-object)\r\n\r\n## License\r\n\r\nember-cli-page-object is licensed under the MIT license.\r\n\r\nSee [LICENSE](./LICENSE) for the full license text.\r\n","google":"UA-67184721-1","note":"Don't delete this file! It's used internally to help with page regeneration."}